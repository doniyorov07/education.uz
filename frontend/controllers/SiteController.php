<?phpnamespace frontend\controllers;use dominus77\sweetalert2\Alert;use frontend\models\ResendVerificationEmailForm;use frontend\models\VerifyEmailForm;use Yii;use yii\base\InvalidArgumentException;use yii\web\BadRequestHttpException;use yii\web\Controller;use yii\filters\VerbFilter;use yii\filters\AccessControl;use common\models\LoginForm;use frontend\models\PasswordResetRequestForm;use frontend\models\ResetPasswordForm;use frontend\models\SignupForm;/** * Site controller */class SiteController extends Controller{    /**     * {@inheritdoc}     */    public function behaviors()    {        return [            'access' => [                'class' => AccessControl::class,                'only' => ['logout', 'signup'],                'rules' => [                    [                        'actions' => ['signup', 'error'],                        'allow' => true,                        'roles' => ['?'],                    ],                    [                        'actions' => ['logout'],                        'allow' => true,                        'roles' => ['@'],                    ],                ],            ],            'verbs' => [                'class' => VerbFilter::class,                'actions' => [                    'logout' => ['get'],                ],            ],        ];    }    /**     * {@inheritdoc}     */    public function actions()    {        return [            'error' => [                'class' => 'yii\web\ErrorAction',            ],        ];    }    /**     * Displays homepage.     *     * @return mixed     */    public function actionIndex()    {        return $this->render('index');    }    public function actionLogin()    {        if (!Yii::$app->user->isGuest) {            return $this->goHome();        }        $model = new LoginForm();        if ($model->load(Yii::$app->request->post())){            if ($model->login() !== false) {                Yii::$app->session->setFlash(Alert::TYPE_SUCCESS, [                    'text' => 'Tizimga muvaffaqqiyatli kirdingiz!',                    'timer' => 1500                ]);                return $this->redirect(['site/index']);            }        }      $model->password = '';        return $this->render('login', [            'model' => $model,        ]);    }    /**     * Logs out the current user.     *     * @return mixed     */     public function actionLogout()     {         Yii::$app->user->logout();         return $this->redirect(['/']);     }     public function actionSignup(){    $model = new SignupForm();    if ($model->load(Yii::$app->request->post()) && $model->signup()) {        Yii::$app->session->setFlash(Alert::TYPE_SUCCESS, [            'text' => 'Accauntni tasdiqlash uchun pochatngizni tekshiring!',            'timer' => 1500,        ]);        return $this->redirect(['site/index']);    }    return $this->render('signup', [        'model' => $model,    ]);}     public function actionRequestPasswordReset()     {         $model = new PasswordResetRequestForm();         if ($model->load(Yii::$app->request->post()) && $model->validate()) {             if ($model->sendEmail()) {                 Yii::$app->session->setFlash('success', 'Check your email for further instructions.');                 return $this->goHome();             }             Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');         }         return $this->render('requestPasswordResetToken', [             'model' => $model,         ]);     }     public function actionResetPassword($token)     {         try {             $model = new ResetPasswordForm($token);         } catch (InvalidArgumentException $e) {             throw new BadRequestHttpException($e->getMessage());         }         if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {             Yii::$app->session->setFlash('success', 'New password saved.');             return $this->goHome();         }         return $this->render('resetPassword', [             'model' => $model,         ]);     }     public function actionVerifyEmail($token)     {         try {             $model = new VerifyEmailForm($token);         } catch (InvalidArgumentException $e) {             throw new BadRequestHttpException($e->getMessage());         }         if (($user = $model->verifyEmail()) && Yii::$app->user->login($user)) {             Yii::$app->session->setFlash('success', 'Emailingiz tasdiqlandi');             return $this->goHome();         }         Yii::$app->session->setFlash('error', 'Kechirasiz, taqdim etilgan token yordamida hisobingizni tasdiqlay olmaymiz.');         return $this->goHome();     }     public function actionResendVerificationEmail()     {         $model = new ResendVerificationEmailForm();         if ($model->load(Yii::$app->request->post()) && $model->validate()) {             if ($model->sendEmail()) {                 Yii::$app->session->setFlash('success', 'Check your email for further instructions.');                 return $this->goHome();             }             Yii::$app->session->setFlash('error', 'Sorry, we are unable to resend verification email for the provided email address.');         }         return $this->render('resendVerificationEmail', [             'model' => $model         ]);     }}